---
- name: Generate the backup filename
  set_fact:
    _platform_db_file: "{{ _backup.project }}_{{ _backup.environment | default('master') }}_{{ _backup.relationship }}_{{ _backup_timestamp }}.sql.gz"
    _platform_db_latest: "{{ _backup.project }}_{{ _backup.environment | default('master') }}_{{ _backup.relationship }}_latest.sql.gz"
- name: Backup database
  shell: >
    platform db:dump
    --directory={{ _run_temp_dir.path }}
    --file={{ _platform_db_file }}
    -z
    -y
    --project={{ _backup.project }}
    --environment={{ _backup.environment | default('master') }}
    --relationship={{ _backup.relationship }}
    {% if _backup.identityFile is defined %}
    --identity-file={{ _backup.identityFile }}
    {% endif %}
  register: _platformshDatabases_backup_result
  until: _platformshDatabases_backup_result.rc == 0
  retries: "{{ _backup.retryCount | default(3) }}"
  delay: "{{ _backup.retryDelay | default(30) }}"
  no_log: "{{ flightdeck_debug | default(false) | ternary(false, true) }}"
  environment:
    PLATFORMSH_CLI_TOKEN: "\
      {% if _backup.cliTokenFile is defined %}\
      {{ lookup('file', _backup.cliTokenFile) }}\
      {% else %}\
      {{ _backup.cliToken }}\
      {% endif %}"
- name: Push backup to S3
  aws_s3:
    bucket: "{{ _backup.bucket }}"
    object: "{{ _backup.prefix | default('') }}/{{ tractorbeam_scope | default('') }}/{{ _platform_db_file }}"
    src: "{{ _run_temp_dir.path }}/{{ _platform_db_file }}"
    mode: put
    s3_url: "{{ _backup.endpoint | default(omit) }}"
    region: "{{ _backup.region | default(omit) }}"
    encrypt: no
    permission: private
    aws_access_key: "\
      {% if _backup.accessKeyFile is defined %}\
      {{ lookup('file', _backup.accessKeyFile) }}\
      {% else %}\
      {{ _backup.accessKey | default(omit) }}\
      {% endif %}"
    aws_secret_key: "\
      {% if _backup.secretKeyFile is defined %}\
      {{ lookup('file', _backup.secretKeyFile) }}\
      {% else %}\
      {{ _backup.secretKey | default(omit) }}\
      {% endif %}"
  no_log: "{{ flightdeck_debug | default(false) | ternary(false, true) }}"
- name: Get list of files
  aws_s3:
    bucket: "{{ _backup.bucket }}"
    prefix: "{{ _backup.prefix }}/{{ tractorbeam_scope | default('') }}"
    mode: list
    aws_access_key: "\
      {% if _backup.accessKeyFile is defined %}\
      {{ lookup('file', _backup.accessKeyFile) }}\
      {% else %}\
      {{ _backup.accessKey | default(omit) }}\
      {% endif %}"
    aws_secret_key: "\
      {% if _backup.secretKeyFile is defined %}\
      {{ lookup('file', _backup.secretKeyFile) }}\
      {% else %}\
      {{ _backup.secretKey | default(omit) }}\
      {% endif %}"
    s3_url: "{{ _backup.endpoint | default(omit) }}"
  register: _list_backup
- name: Filter and sort the list of files
  set_fact:
    _list_backup_sorted: "{{ _list_backup.s3_keys | select('regex', _regex) | list | sort }}"
  vars:
    _regex: "{{ _backup.project }}_{{ _backup.environment | default('master') }}_{{ _backup.relationship }}_[0-9]{14}\\.sql\\.gz"
  no_log: "{{ flightdeck_debug | default(false) | ternary(false, true) }}"
- name: Delete old backups
  aws_s3:
    bucket: "{{ _backup.bucket }}"
    prefix: "{{ _backup.prefix }}/{{ tractorbeam_scope | default('') }}"
    mode: delobj
    object: "{{ item }}"
    aws_access_key: "\
      {% if _backup.accessKeyFile is defined %}\
      {{ lookup('file', _backup.accessKeyFile) }}\
      {% else %}\
      {{ _backup.accessKey | default(omit) }}\
      {% endif %}"
    aws_secret_key: "\
      {% if _backup.secretKeyFile is defined %}\
      {{ lookup('file', _backup.secretKeyFile) }}\
      {% else %}\
      {{ _backup.secretKey | default(omit) }}\
      {% endif %}"
    s3_url: "{{ _backup.endpoint | default(omit) }}"
  loop: "{{ _list_backup_sorted[:-(_retain_count | int)] }}"
  no_log: "{{ flightdeck_debug | default(false) | ternary(false, true) }}"
- name: Push backup to S3 as latest
  aws_s3:
    bucket: "{{ _backup.bucket }}"
    object: "{{ _backup.prefix | default('') }}/{{ _platform_db_latest }}"
    src: "{{ _run_temp_dir.path }}/{{ _platform_db_file }}"
    mode: put
    s3_url: "{{ _backup.endpoint | default(omit) }}"
    region: "{{ _backup.region | default(omit) }}"
    encrypt: no
    permission: private
    overwrite: yes
    aws_access_key: "\
      {% if _backup.accessKeyFile is defined %}\
      {{ lookup('file', _backup.accessKeyFile) }}\
      {% else %}\
      {{ _backup.accessKey | default(omit) }}\
      {% endif %}"
    aws_secret_key: "\
      {% if _backup.secretKeyFile is defined %}\
      {{ lookup('file', _backup.secretKeyFile) }}\
      {% else %}\
      {{ _backup.secretKey | default(omit) }}\
      {% endif %}"
  no_log: "{{ flightdeck_debug | default(false) | ternary(false, true) }}"
- include_tasks: "healhcheck.yml"
