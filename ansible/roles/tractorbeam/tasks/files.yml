---
- name: Create a temp directory to stage the backup
  tempfile:
    state: directory
    prefix: "files-{{ _backup.bucket }}-{{ _backup_timestamp }}"
  register: _files_temp_dir
  when:
    - _backup.cacheDir is not defined
- name: Create a cache directory for the backup
  file:
    state: directory
    path: "{{ _backup.cacheDir }}"
    owner: "backup"
    group: "backup"
    mode: "u=rwx,g=rxw,o=rwx"
  when:
    - _backup.cacheDir is defined
- name: Sync files from remote
  shell: >
    rsync
    {% for _option in _backup.options | default(['-az']) %}
    {{ _option }}{{ ' ' }}
    {% endfor %}
    -e "ssh -i {{ _backup.identityFile }} -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null {% if _backup.port is defined %}-p {{ _backup.port }}{% endif %}"
    {% for _exclude in _backup.excludes | default(_tractorbeam_default_files_excludes) %}
    --exclude={{ _exclude }}{{ ' ' }}
    {% endfor %}
    {% if _backup.delete | default(true) %}
    --delete
    {% endif %}
    --force
    --chown=backup:backup
    {{ _backup.user }}@{{ _backup.src }}:{{ _backup.path }}/
    {{ _backup.cacheDir | default(_files_temp_dir.path) }}
- name: Create a tempfile for the rclone config
  tempfile:
    prefix: "tractorbeam-files-"
    suffix: ".conf"
    state: file
  register: _rclone_conf
- name: Template the rclone conf
  copy:
    content: |
      [source]
      type = local
      copy_links = false
      links = false
      skip_links = true
      no_check_updated = true
      case_sensitive = true
      case_insensitive = false

      [dest]
      type = s3
      provider = {{ _backup.provider | default('AWS') }}
      env_auth = false
      access_key_id = {{ _dest_access_key }}
      secret_access_key = {{ _dest_secret_key }}
      endpoint = {{ _backup.endpoint | default('') | regex_replace('[A-z]*://', '') }}
      region = {{ _backup.region | default('') }}
      acl = {{ _backup.acl | default('private') }}
    dest: "{{ _rclone_conf.path }}"
  vars:
    _dest_access_key: "\
      {% if _backup.accessKeyFile is defined %}\
      {{ lookup('file', _backup.accessKeyFile) }}\
      {% else %}\
      {{ _backup.accessKey | default(omit) }}\
      {% endif %}"
    _dest_secret_key: "\
      {% if _backup.secretKeyFile is defined %}\
      {{ lookup('file', _backup.secretKeyFile) }}\
      {% else %}\
      {{ _backup.secretKey | default(omit) }}\
      {% endif %}"
- name: Sync files using rclone
  shell: >
    rclone sync
    source:/{{ _backup.cacheDir | default(_files_temp_dir.path) }}/
    dest:/{{ _backup.bucket }}/{% if _backup.prefix is defined %}{{ _backup.prefix }}/{% endif %}
    --config="{{ _rclone_conf.path }}"
    {% for _exclude in _backup.excludes | default(_tractorbeam_default_files_excludes) %}
    --exclude="{{ _exclude }}"{{ '' }}
    {% endfor %}
    {% if _backup.delete | default(true) %}
    --delete-during
    {% endif %}
    {% if (flightdeck_debug | default(false)) != true %}
    --quiet
    {% else %}
    --verbose="4"
    {% endif %}
  register: _fromlocal_result
  until: _fromlocal_result.rc == 0
  retries: "{{ _backup.retryCount | default(3) }}"
  delay: "{{ _backup.retryDelay | default(30) }}"
- name: delete stage directory
  file:
    path: "_files_temp_dir.path"
    state: absent
  when:
    - _files_temp_dir.path is defined
- include_tasks: "healhcheck.yml"
