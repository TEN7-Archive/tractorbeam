---
- name: Create a temp directory to stage the backup
  tempfile:
    state: directory
    prefix: "s3-{{ _backup.bucket }}-{{ _backup_timestamp }}"
  register: _s3_temp_dir
  when:
    - _backup.cacheDir is not defined
- name: Create a cache directory for the backup
  file:
    state: directory
    path: "{{ _backup.cacheDir }}"
    owner: "backup"
    group: "backup"
    mode: "u=rwx,g=rxw,o=rwx"
  when:
    - _backup.cacheDir is defined
- name: Sync files from source S3 using s3cmd
  shell: >
    s3cmd sync
    {% for _exclude in _backup.excludes | default(_tractorbeam_default_files_excludes) %}
    --exclude="{{ _exclude }}"{{ '' }}
    {% endfor %}
    {% if _backup.delete | default(true) %}
    --delete-removed
    {% endif %}
    {% if (flightdeck_debug | default(false)) != true %}
    --quiet
    {% elif lookup('env', 'ANSIBLE_VERBOSITY') == 4 %}
    --debug
    {% else %}
    --verbose
    {% endif %}
    {% if _backup.srcEndpoint is defined %}
    --host="{{ _backup.srcEndpoint | regex_replace('[A-z]*://', '') }}"
    --host-bucket="{{ _backup.srcBucketUrl | default(_backup.srcBucket + '.' + _backup.srcEndpoint) | regex_replace('[A-z]*://', '') }}"
    {% endif %}
    {% if _backup.srcRegion is defined %}
    --region="{{ _backup.srcRegion }}"
    {% endif %}
    {% if _backup.srcAccessKeyFile is defined %}
    --access_key="{{ lookup('file', _backup.srcAccessKeyFile) }}"
    {% elif _backup.srcAccessKey is defined %}
    --access_key="{{ _backup.srcAccessKey }}"
    {% endif %}
    {% if _backup.srcSecretKeyFile is defined %}
    --secret_key="{{ lookup('file', _backup.srcSecretKeyFile) }}"
    {% elif _backup.srcSecretKey is defined %}
    --secret_key="{{ _backup.srcSecretKey }}"
    {% endif %}
    --recursive
    --continue
    --force
    --no-preserve
    s3://{{ _backup.srcBucket }}/{% if _backup.prefix is defined %}{{ _backup.prefix }}/{% endif %}
    {{ _backup.cacheDir | default(_s3_temp_dir.path) }}/
  register: _froms3_result
  until: _froms3_result.rc == 0
  retries: "{{ _backup.retryCount | default(3) }}"
  delay: "{{ _backup.retryDelay | default(30) }}"
- name: Sync directory to S3 using s3cmd
  shell: >
    s3cmd sync
    {% for _exclude in _backup.excludes | default(_tractorbeam_default_files_excludes) %}
    --exclude="{{ _exclude }}"{{ '' }}
    {% endfor %}
    {% if _backup.delete | default(true) %}
    --delete-removed
    {% endif %}
    {% if (flightdeck_debug | default(false)) != true %}
    --quiet
    {% elif lookup('env', 'ANSIBLE_VERBOSITY') == 4 %}
    --debug
    {% else %}
    --verbose
    {% endif %}
    {% if _backup.endpoint is defined %}
    --host="{{ _backup.endpoint | regex_replace('[A-z]*://', '') }}"
    --host-bucket="{{ _backup.bucketUrl | default(_backup.bucket + '.' + _backup.endpoint) | regex_replace('[A-z]*://', '') }}"
    {% endif %}
    {% if _backup.region is defined %}
    --region="{{ _backup.region }}"
    {% endif %}
    {% if _backup.accessKeyFile is defined %}
    --access_key="{{ lookup('file', _backup.accessKeyFile) }}"
    {% elif _backup.accessKey is defined %}
    --access_key="{{ _backup.accessKey }}"
    {% endif %}
    {% if _backup.secretKeyFile is defined %}
    --secret_key="{{ lookup('file', _backup.secretKeyFile) }}"
    {% elif _backup.secretKey is defined %}
    --secret_key="{{ _backup.secretKey }}"
    {% endif %}
    --acl-private
    --recursive
    --continue
    --force
    --no-preserve
    {{ _backup.cacheDir | default(_s3_temp_dir.path) }}/
    s3://{{ _backup.bucket }}/{{ _backup.prefix }}/
  register: _tos3_result
  until: _tos3_result.rc == 0
  retries: "{{ _backup.retryCount | default(3) }}"
  delay: "{{ _backup.retryDelay | default(30) }}"
- name: delete stage directory
  file:
    path: "_s3_temp_dir.path"
    state: absent
  when:
    - _s3_temp_dir.path is defined
- include_tasks: "healhcheck.yml"
